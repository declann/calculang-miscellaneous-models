{"version":3,"sources":["rotation.cul.js"],"names":["x","y_","y0","arcy","trend","wavey","angle","angle_in","x1","x_in","pinchiness_in","arc_size_in","waviness_in","tallness_in","Math","cos","sin","y"],"mappings":"AAAA,SAASA,CAAT,EAAYC,EAAE,IAAIC,EAAlB,EAAsBC,IAAtB,EAA4BC,KAA5B,EAAmCC,KAAnC,QAAgD,mBAAhD;AACA,SAASF,IAAT,EAAeC,KAAf,EAAsBC,KAAtB;;AAEA,OAAO,MAAMC,KAAK,GAAG,CAAC,EAAEC,QAAF,EAAD,KAAkBA,QAAhC;;AAEP;AACA,OAAO,MAAMC,EAAE,GAAG,CAAC,EAAEC,IAAF,EAAQF,QAAR,EAAkBG,aAAlB,EAAiCC,WAAjC,EAA8CC,WAA9C,EAA2DC,WAA3D,EAAD,KAA8Eb,CAAC,CAAC,EAAES,IAAF,EAAD,CAAD,GAAcK,IAAI,CAACC,GAAL,CAAST,KAAK,CAAC,EAAEC,QAAF,EAAD,CAAd,CAAd,GAA8CL,EAAE,CAAC,EAAEO,IAAF,EAAQC,aAAR,EAAuBC,WAAvB,EAAoCC,WAApC,EAAiDC,WAAjD,EAAD,CAAF,GAAqEC,IAAI,CAACE,GAAL,CAASV,KAAK,CAAC,EAAEC,QAAF,EAAD,CAAd,CAA5M,C,CAA2O;AAClP,OAAO,MAAMU,CAAC,GAAG,CAAC,EAAER,IAAF,EAAQC,aAAR,EAAuBC,WAAvB,EAAoCC,WAApC,EAAiDC,WAAjD,EAA8DN,QAA9D,EAAD,KAA8EL,EAAE,CAAC,EAAEO,IAAF,EAAQC,aAAR,EAAuBC,WAAvB,EAAoCC,WAApC,EAAiDC,WAAjD,EAAD,CAAF,GAAqEC,IAAI,CAACC,GAAL,CAAST,KAAK,CAAC,EAAEC,QAAF,EAAD,CAAd,CAArE,GAAqGP,CAAC,CAAC,EAAES,IAAF,EAAD,CAAD,GAAcK,IAAI,CAACE,GAAL,CAASV,KAAK,CAAC,EAAEC,QAAF,EAAD,CAAd,CAA3M;;;AAGP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { x, y_ as y0, arcy, trend, wavey } from \"./beating.cul?cul_scope_id=1&cul_parent_scope_id=0\";\nexport { arcy, trend, wavey };\n\nexport const angle = ({ angle_in }) => angle_in;\n\n// I want the x used in pow to be the x_in and not this\nexport const x1 = ({ x_in, angle_in, pinchiness_in, arc_size_in, waviness_in, tallness_in }) => x({ x_in }) * Math.cos(angle({ angle_in })) - y0({ x_in, pinchiness_in, arc_size_in, waviness_in, tallness_in }) * Math.sin(angle({ angle_in })); // y0 ref here means only working for final y function\nexport const y = ({ x_in, pinchiness_in, arc_size_in, waviness_in, tallness_in, angle_in }) => y0({ x_in, pinchiness_in, arc_size_in, waviness_in, tallness_in }) * Math.cos(angle({ angle_in })) + x({ x_in }) * Math.sin(angle({ angle_in }));\n\n\n// todo approach for transformation of all functions:\n// play with this even though its probably has fundamental tradeoffs:\n\n/*\nexport const heart = () => trend() + arcy() * wavey() * tallness();\n\nexport const f = () => (f_in);\n\nexport const y = () => {\n  switch (f()) {\n    case 'heart': return heart();\n    case 'trend': return trend();\n    //...\n  }\n}\n*/"]}