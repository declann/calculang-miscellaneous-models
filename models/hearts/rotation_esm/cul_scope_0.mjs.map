{"version":3,"names":["x","y_","y0","arcy","trend","wavey","angle","angle_in","x1","x_in","pinchiness_in","arc_size_in","waviness_in","tallness_in","Math","cos","sin","y"],"sources":["rotation.cul.js"],"sourcesContent":["import { x, y_ as y0, arcy, trend, wavey} from './beating.cul';\nexport { arcy, trend, wavey };\n\nexport const angle = () => (angle_in);\n\n// I want the x used in pow to be the x_in and not this\nexport const x1 = () => x() * Math.cos(angle()) - y0() * Math.sin(angle()); // y0 ref here means only working for final y function\nexport const y = () => y0() * Math.cos(angle()) + x() * Math.sin(angle());\n\n\n// todo approach for transformation of all functions:\n// play with this even though its probably has fundamental tradeoffs:\n\n/*\nexport const heart = () => trend() + arcy() * wavey() * tallness();\n\nexport const f = () => (f_in);\n\nexport const y = () => {\n  switch (f()) {\n    case 'heart': return heart();\n    case 'trend': return trend();\n    //...\n  }\n}\n*/\n"],"mappings":"AAAA,SAASA,CAAC,EAAEC,EAAE,IAAIC,EAAE,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAO,oDAAe;AAC9D,SAASF,IAAI,EAAEC,KAAK,EAAEC,KAAK;;AAE3B,OAAO,MAAMC,KAAK,GAAGA,CAAA,EAAAC,QAAA,OAAOA,QAAS;;AAErC;AACA,OAAO,MAAMC,EAAE,GAAGA,CAAA,EAAAC,IAAA,EAAAF,QAAA,EAAAG,aAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAC,WAAA,OAAMb,CAAC,GAAAS,IAAA,GAAE,GAAGK,IAAI,CAACC,GAAG,CAACT,KAAK,GAAAC,QAAA,GAAE,CAAC,GAAGL,EAAE,GAAAO,IAAA,EAAAC,aAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAC,WAAA,GAAE,GAAGC,IAAI,CAACE,GAAG,CAACV,KAAK,GAAAC,QAAA,GAAE,CAAC,CAAC,CAAC;AAC5E,OAAO,MAAMU,CAAC,GAAGA,CAAA,EAAAR,IAAA,EAAAC,aAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAN,QAAA,OAAML,EAAE,GAAAO,IAAA,EAAAC,aAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAC,WAAA,GAAE,GAAGC,IAAI,CAACC,GAAG,CAACT,KAAK,GAAAC,QAAA,GAAE,CAAC,GAAGP,CAAC,GAAAS,IAAA,GAAE,GAAGK,IAAI,CAACE,GAAG,CAACV,KAAK,GAAAC,QAAA,GAAE,CAAC;;;AAGzE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}