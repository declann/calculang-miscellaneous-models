{"version":3,"sources":["LA.cul.js"],"names":["memoize","a_","a$","b_","b$","c_","c$","t_","t$","i_","i$","x_","x$","y_","y$","z_","z$","a$m","JSON","stringify","a","a_in","b$m","b","b_in","c$m","c","c_in","t$m","t","i$m","i","i_in","x$m","x","y$m","y","z$m","z"],"mappings":"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","sourcesContent":["\nimport { memoize } from 'underscore';\n//import memoize from 'lru-memoize';\n//import { isEqual } from 'underscore'; // TODO poor tree shaking support, or why is this impact so massive? Move to lodash/lodash-es?\n\nimport { a_ as a$, b_ as b$, c_ as c$, t_ as t$, i_ as i$, x_ as x$, y_ as y$, z_ as z$ } from \"./LA.cul.js?+memoed&cul_scope_id=1&cul_parent_scope_id=0\"; // there is already-culed stuff in here, why? imports to memo loader include cul_scope_id, what logic should it apply RE passing forward? eliminate? Probably!\n\n\n\n////////// start a memo-loader code //////////\n//const a$m = memoize(999999, isEqual)(a$);\nexport const a$m = memoize(a$, JSON.stringify);\nexport const a = (a) => {\n  return a$m(a);\n  // eslint-disable-next-line no-undef\n  a$({ a_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end a memo-loader code //////////\n\n\n\n////////// start b memo-loader code //////////\n//const b$m = memoize(999999, isEqual)(b$);\nexport const b$m = memoize(b$, JSON.stringify);\nexport const b = (a) => {\n  return b$m(a);\n  // eslint-disable-next-line no-undef\n  b$({ b_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end b memo-loader code //////////\n\n\n\n////////// start c memo-loader code //////////\n//const c$m = memoize(999999, isEqual)(c$);\nexport const c$m = memoize(c$, JSON.stringify);\nexport const c = (a) => {\n  return c$m(a);\n  // eslint-disable-next-line no-undef\n  c$({ c_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end c memo-loader code //////////\n\n\n\n////////// start t memo-loader code //////////\n//const t$m = memoize(999999, isEqual)(t$);\nexport const t$m = memoize(t$, JSON.stringify);\nexport const t = (a) => {\n  return t$m(a);\n  // eslint-disable-next-line no-undef\n  t$({}); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end t memo-loader code //////////\n\n\n\n////////// start i memo-loader code //////////\n//const i$m = memoize(999999, isEqual)(i$);\nexport const i$m = memoize(i$, JSON.stringify);\nexport const i = (a) => {\n  return i$m(a);\n  // eslint-disable-next-line no-undef\n  i$({ i_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end i memo-loader code //////////\n\n\n\n////////// start x memo-loader code //////////\n//const x$m = memoize(999999, isEqual)(x$);\nexport const x$m = memoize(x$, JSON.stringify);\nexport const x = (a) => {\n  return x$m(a);\n  // eslint-disable-next-line no-undef\n  x$({ i_in, a_in, b_in, c_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end x memo-loader code //////////\n\n\n\n////////// start y memo-loader code //////////\n//const y$m = memoize(999999, isEqual)(y$);\nexport const y$m = memoize(y$, JSON.stringify);\nexport const y = (a) => {\n  return y$m(a);\n  // eslint-disable-next-line no-undef\n  y$({ i_in, a_in, b_in, c_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end y memo-loader code //////////\n\n\n\n////////// start z memo-loader code //////////\n//const z$m = memoize(999999, isEqual)(z$);\nexport const z$m = memoize(z$, JSON.stringify);\nexport const z = (a) => {\n  return z$m(a);\n  // eslint-disable-next-line no-undef\n  z$({ i_in, a_in, b_in, c_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end z memo-loader code //////////"]}