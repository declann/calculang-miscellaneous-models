{"version":3,"names":["nn","_","layer","layer_in","id","id_in","prev_id","prev_id_in","input","input_in","layer_size","json","sizes","w","layers","weights","b","biases","weighted_sum","range","reduce","acc","n","x","x_in","activation","Math","pow","E"],"sources":["from-brain-xor.cul.js"],"sourcesContent":["import nn from \"./from-brain-xor.json\";\nimport _ from \"underscore\";\n\n// neurons by layer and id within a layer\nexport const layer = () => layer_in; // e.g. 0 = input layer, 1 = hidden layer, 2 = output layer\nexport const id = () => id_in;\nexport const prev_id = () => prev_id_in;\nexport const input = () => input_in; // e.g. [1,0]\n\nexport const layer_size = () => nn.json.sizes[layer()];\n\nexport const w = () => {\n  // layer, id, prev id\n  if (layer() == 0) {\n    return 1;\n    /*console.error(\"layer_in should be > 0\");\n    console.trace();\n    debugger;\n    return;*/\n  }\n  return nn.json.layers[layer()].weights[id()][prev_id()];\n};\n\nexport const b = () => {\n  if (layer() == 0) {\n    return 0;\n    /*console.error(\"layer_in should be > 0\");\n    console.trace();\n    debugger;\n    return;*/\n  }\n  return nn.json.layers[layer()].biases[id()];\n};\n\nexport const weighted_sum = () => {\n  return _.range(0, layer_size({ layer_in: layer() - 1 })).reduce(\n    (acc, prev_id_in) =>\n      acc + n({ layer_in: layer() - 1 , id_in:prev_id()/* !! */}) * w({ /*layer_in: layer() - 1, id_in:prev_id()*//* !! */ }),\n    0\n  );\n};\n\nexport const x = () => x_in;\n\nexport const activation = () => {\n  //console.log(x(), JSON.stringify(arguments));\n  return 1 / (1 + Math.pow(Math.E, -1 * x()));\n};\n\nexport const n = () => {\n  if (layer() == 0) return input()[id()];\n  //else return activation({ x_in: weighted_sum() + b() }); // calculang not picking up summarisation of x\n  else return 1 / (1 + Math.pow(Math.E, -1 * (weighted_sum() + b())));\n};\n"],"mappings":"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"}