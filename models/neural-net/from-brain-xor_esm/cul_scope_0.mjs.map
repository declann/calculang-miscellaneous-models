{"version":3,"names":["nn","_","layer","layer_in","id","id_in","prev_id","prev_id_in","input","input_in","layer_size","json","sizes","w","console","error","trace","layers","weights","b","biases","weighted_sum","x_in","Math","reduce","range","n","x","activation","pow","E"],"sources":["from-brain-xor.cul.js"],"sourcesContent":["import nn from \"./from-brain-xor.json\";\nimport _ from \"underscore\";\n\n// neurons by layer and id within a layer\nexport const layer = () => layer_in; // e.g. 0 = input layer, 1 = hidden layer, 2 = output layer\nexport const id = () => id_in;\nexport const prev_id = () => prev_id_in;\nexport const input = () => input_in; // e.g. [1,0]\n\nexport const layer_size = () => nn.json.sizes[layer()];\n\nexport const w = () => {\n  // layer, id, prev id\n  if (layer() == 0) {\n    console.error(\"layer_in should be > 0\");\n    console.trace();\n    return;\n  }\n  return nn.json.layers[layer()].weights[id()][prev_id()];\n};\n\nexport const b = () => {\n  if (layer() == 0) {\n    console.error(\"layer_in should be > 0\");\n    console.trace();\n    return;\n  }\n  return nn.json.layers[layer().biases[id()]];\n};\n\nexport const weighted_sum = () => {\n  return Math.reduce(\n    _.range(0, layer_size({ layer_in: layer() - 1 })).reduce(\n      (prev_id_in) =>\n        n({ layer_in: layer() - 1 }) * w({ layer_in: layer() - 1 })\n    )\n  );\n};\n\nexport const x = () => x_in;\n\nexport const activation = () => 1 / (1 + Math.pow(Math.E, -1 * x()));\n\nexport const n = () => {\n  if (layer() == 0) return input()[id()];\n  else return activation({ x_in: weighted_sum() + b() });\n};\n\n"],"mappings":"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"}