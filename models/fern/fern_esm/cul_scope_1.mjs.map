{"version":3,"sources":["fern.cul.js"],"names":["y","x","barnsley_5","barnsley_4","barnsley_3","barnsley_2","barnsley_1","barnsley_0","winner","i","winning_transform_values","barnsley_transforms","barnsley_transforms_","winning_transform_values_","i_in","i_","winner_","r","Math","random","total_probability","reduce","p","v","prob1","prob2","prob3","prob4","barnsley_0_","barnsley_1_","barnsley_2_","barnsley_3_","barnsley_4_","barnsley_5_","x_","y_"],"mappings":"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","sourcesContent":["import { y } from \"./fern.cul.js\";import { x } from \"./fern.cul.js\";import { barnsley_5 } from \"./fern.cul.js\";import { barnsley_4 } from \"./fern.cul.js\";import { barnsley_3 } from \"./fern.cul.js\";import { barnsley_2 } from \"./fern.cul.js\";import { barnsley_1 } from \"./fern.cul.js\";import { barnsley_0 } from \"./fern.cul.js\";import { winner } from \"./fern.cul.js\";import { i } from \"./fern.cul.js\";import { winning_transform_values } from \"./fern.cul.js\";import { barnsley_transforms } from \"./fern.cul.js\"; // the starting point here is modelled from the nicely simple/narrated code @ https://www.fractal.garden/barnsley-fern by Rico Trebeljahr\n\n// an array of 4 transformations and associated probabilities\nexport const barnsley_transforms_ = ({}) => [\n[\n/* transformation params: */0, 0, 0, 0.16, 0, 0,\n/* probability for this transform: */0.01],\n\n[0.85, 0.04, -0.04, 0.85, 0, 1.6, 0.85],\n[0.2, -0.26, 0.23, 0.22, 0, 1.6, 0.07],\n[-0.15, 0.28, 0.26, 0.24, 0, 0.44, 0.07]];\n\n\nexport const winning_transform_values_ = ({ i_in }) => barnsley_transforms({})[winner({ i_in })];\n\nexport const i_ = ({ i_in }) => i_in;\n\n// a draw determines which transformation to apply in each iteration\nexport const winner_ = ({ i_in }) => {\n  var r = Math.random() + 0 * i({ i_in });\n\n  // imperative so don't like this so much in calculang.. but its quick and ready, see reference above\n\n  // moving to weighting of probabilities, so easier to allow users to vary weights\n  const total_probability = barnsley_transforms({}).reduce((p, v) => p + v[6], 0);\n\n  const prob1 = barnsley_transforms({})[1][6] / total_probability;\n  const prob2 = barnsley_transforms({})[2][6] / total_probability;\n  const prob3 = barnsley_transforms({})[3][6] / total_probability;\n  const prob4 = barnsley_transforms({})[0][6] / total_probability;\n  if (r <= prob1) {\n    return 1;\n  } else if (r <= prob1 + prob2) {\n    return 2;\n  } else if (r <= prob1 + prob2 + prob3) {\n    return 3;\n  } else if (r <= prob1 + prob2 + prob3 + prob4) {// next step.. make # transforms variable\n    return 0;\n  }\n};\n\n// also abstract this..\nexport const barnsley_0_ = ({ i_in }) => winning_transform_values({ i_in })[0];\nexport const barnsley_1_ = ({ i_in }) => winning_transform_values({ i_in })[1];\nexport const barnsley_2_ = ({ i_in }) => winning_transform_values({ i_in })[2];\nexport const barnsley_3_ = ({ i_in }) => winning_transform_values({ i_in })[3];\nexport const barnsley_4_ = ({ i_in }) => winning_transform_values({ i_in })[4];\nexport const barnsley_5_ = ({ i_in }) => winning_transform_values({ i_in })[5];\n\n// this is where the magic is brought together::\n// the iterated function system\n\nexport const x_ = ({ i_in }) => {\n  if (i({ i_in }) == 0) return 0;else\n\n  return (\n    barnsley_0({ i_in }) * x({ i_in: i({ i_in }) - 1 }) +\n    barnsley_1({ i_in }) * y({ i_in: i({ i_in }) - 1 }) +\n    barnsley_4({ i_in }));\n\n};\n\nexport const y_ = ({ i_in }) => {\n  if (i({ i_in }) == 0) return 0;else\n\n  return (\n    barnsley_2({ i_in }) * x({ i_in: i({ i_in }) - 1 }) +\n    barnsley_3({ i_in }) * y({ i_in: i({ i_in }) - 1 }) +\n    barnsley_5({ i_in }));\n\n};"]}