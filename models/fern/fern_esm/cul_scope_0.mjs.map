{"version":3,"sources":["fern.cul.js"],"names":["memoize","barnsley_transforms_","barnsley_transforms$","winning_transform_values_","winning_transform_values$","i_","i$","winner_","winner$","barnsley_0_","barnsley_0$","barnsley_1_","barnsley_1$","barnsley_2_","barnsley_2$","barnsley_3_","barnsley_3$","barnsley_4_","barnsley_4$","barnsley_5_","barnsley_5$","x_","x$","y_","y$","barnsley_transforms$m","JSON","stringify","barnsley_transforms","a","winning_transform_values$m","winning_transform_values","i_in","i$m","i","winner$m","winner","barnsley_0$m","barnsley_0","barnsley_1$m","barnsley_1","barnsley_2$m","barnsley_2","barnsley_3$m","barnsley_3","barnsley_4$m","barnsley_4","barnsley_5$m","barnsley_5","x$m","x","y$m","y"],"mappings":"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","sourcesContent":["\nimport { memoize } from 'underscore';\n//import memoize from 'lru-memoize';\n//import { isEqual } from 'underscore'; // TODO poor tree shaking support, or why is this impact so massive? Move to lodash/lodash-es?\n\nimport { barnsley_transforms_ as barnsley_transforms$, winning_transform_values_ as winning_transform_values$, i_ as i$, winner_ as winner$, barnsley_0_ as barnsley_0$, barnsley_1_ as barnsley_1$, barnsley_2_ as barnsley_2$, barnsley_3_ as barnsley_3$, barnsley_4_ as barnsley_4$, barnsley_5_ as barnsley_5$, x_ as x$, y_ as y$ } from \"./fern.cul.js?+memoed&cul_scope_id=1&cul_parent_scope_id=0\"; // there is already-culed stuff in here, why? imports to memo loader include cul_scope_id, what logic should it apply RE passing forward? eliminate? Probably!\n\n\n\n////////// start barnsley_transforms memo-loader code //////////\n//const barnsley_transforms$m = memoize(999999, isEqual)(barnsley_transforms$);\nexport const barnsley_transforms$m = memoize(barnsley_transforms$, JSON.stringify);\nexport const barnsley_transforms = (a) => {\n  return barnsley_transforms$m(a);\n  // eslint-disable-next-line no-undef\n  barnsley_transforms$({}); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end barnsley_transforms memo-loader code //////////\n\n\n\n////////// start winning_transform_values memo-loader code //////////\n//const winning_transform_values$m = memoize(999999, isEqual)(winning_transform_values$);\nexport const winning_transform_values$m = memoize(winning_transform_values$, JSON.stringify);\nexport const winning_transform_values = (a) => {\n  return winning_transform_values$m(a);\n  // eslint-disable-next-line no-undef\n  winning_transform_values$({ i_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end winning_transform_values memo-loader code //////////\n\n\n\n////////// start i memo-loader code //////////\n//const i$m = memoize(999999, isEqual)(i$);\nexport const i$m = memoize(i$, JSON.stringify);\nexport const i = (a) => {\n  return i$m(a);\n  // eslint-disable-next-line no-undef\n  i$({ i_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end i memo-loader code //////////\n\n\n\n////////// start winner memo-loader code //////////\n//const winner$m = memoize(999999, isEqual)(winner$);\nexport const winner$m = memoize(winner$, JSON.stringify);\nexport const winner = (a) => {\n  return winner$m(a);\n  // eslint-disable-next-line no-undef\n  winner$({ i_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end winner memo-loader code //////////\n\n\n\n////////// start barnsley_0 memo-loader code //////////\n//const barnsley_0$m = memoize(999999, isEqual)(barnsley_0$);\nexport const barnsley_0$m = memoize(barnsley_0$, JSON.stringify);\nexport const barnsley_0 = (a) => {\n  return barnsley_0$m(a);\n  // eslint-disable-next-line no-undef\n  barnsley_0$({ i_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end barnsley_0 memo-loader code //////////\n\n\n\n////////// start barnsley_1 memo-loader code //////////\n//const barnsley_1$m = memoize(999999, isEqual)(barnsley_1$);\nexport const barnsley_1$m = memoize(barnsley_1$, JSON.stringify);\nexport const barnsley_1 = (a) => {\n  return barnsley_1$m(a);\n  // eslint-disable-next-line no-undef\n  barnsley_1$({ i_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end barnsley_1 memo-loader code //////////\n\n\n\n////////// start barnsley_2 memo-loader code //////////\n//const barnsley_2$m = memoize(999999, isEqual)(barnsley_2$);\nexport const barnsley_2$m = memoize(barnsley_2$, JSON.stringify);\nexport const barnsley_2 = (a) => {\n  return barnsley_2$m(a);\n  // eslint-disable-next-line no-undef\n  barnsley_2$({ i_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end barnsley_2 memo-loader code //////////\n\n\n\n////////// start barnsley_3 memo-loader code //////////\n//const barnsley_3$m = memoize(999999, isEqual)(barnsley_3$);\nexport const barnsley_3$m = memoize(barnsley_3$, JSON.stringify);\nexport const barnsley_3 = (a) => {\n  return barnsley_3$m(a);\n  // eslint-disable-next-line no-undef\n  barnsley_3$({ i_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end barnsley_3 memo-loader code //////////\n\n\n\n////////// start barnsley_4 memo-loader code //////////\n//const barnsley_4$m = memoize(999999, isEqual)(barnsley_4$);\nexport const barnsley_4$m = memoize(barnsley_4$, JSON.stringify);\nexport const barnsley_4 = (a) => {\n  return barnsley_4$m(a);\n  // eslint-disable-next-line no-undef\n  barnsley_4$({ i_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end barnsley_4 memo-loader code //////////\n\n\n\n////////// start barnsley_5 memo-loader code //////////\n//const barnsley_5$m = memoize(999999, isEqual)(barnsley_5$);\nexport const barnsley_5$m = memoize(barnsley_5$, JSON.stringify);\nexport const barnsley_5 = (a) => {\n  return barnsley_5$m(a);\n  // eslint-disable-next-line no-undef\n  barnsley_5$({ i_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end barnsley_5 memo-loader code //////////\n\n\n\n////////// start x memo-loader code //////////\n//const x$m = memoize(999999, isEqual)(x$);\nexport const x$m = memoize(x$, JSON.stringify);\nexport const x = (a) => {\n  return x$m(a);\n  // eslint-disable-next-line no-undef\n  x$({ i_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end x memo-loader code //////////\n\n\n\n////////// start y memo-loader code //////////\n//const y$m = memoize(999999, isEqual)(y$);\nexport const y$m = memoize(y$, JSON.stringify);\nexport const y = (a) => {\n  return y$m(a);\n  // eslint-disable-next-line no-undef\n  y$({ i_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end y memo-loader code //////////"]}