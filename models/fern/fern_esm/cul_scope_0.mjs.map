{"version":3,"names":["memoize","barnsley_transforms_","barnsley_transforms$","winning_transform_values_","winning_transform_values$","i_","i$","winner_","winner$","barnsley_0_","barnsley_0$","barnsley_1_","barnsley_1$","barnsley_2_","barnsley_2$","barnsley_3_","barnsley_3$","barnsley_4_","barnsley_4$","barnsley_5_","barnsley_5$","x_","x$","y_","y$","barnsley_transforms$m","JSON","stringify","barnsley_transforms","a","winning_transform_values$m","winning_transform_values","i_in","i$m","i","winner$m","winner","barnsley_0$m","barnsley_0","barnsley_1$m","barnsley_1","barnsley_2$m","barnsley_2","barnsley_3$m","barnsley_3","barnsley_4$m","barnsley_4","barnsley_5$m","barnsley_5","x$m","x","y$m","y"],"sources":["fern.cul.js"],"sourcesContent":["\n    import { memoize } from 'underscore';\n    //import memoize from 'lru-memoize';\n    //import { isEqual } from 'underscore'; // TODO poor tree shaking support, or why is this impact so massive? Move to lodash/lodash-es?\n    \n    import { barnsley_transforms_ as barnsley_transforms$, winning_transform_values_ as winning_transform_values$, i_ as i$, winner_ as winner$, barnsley_0_ as barnsley_0$, barnsley_1_ as barnsley_1$, barnsley_2_ as barnsley_2$, barnsley_3_ as barnsley_3$, barnsley_4_ as barnsley_4$, barnsley_5_ as barnsley_5$, x_ as x$, y_ as y$ } from './fern.cul.js?+memoed'; // there is already-culed stuff in here, why? imports to memo loader include cul_scope_id, what logic should it apply RE passing forward? eliminate? Probably!\n    \n    \n\n////////// start barnsley_transforms memo-loader code //////////\n//const barnsley_transforms$m = memoize(999999, isEqual)(barnsley_transforms$);\nexport const barnsley_transforms$m = memoize(barnsley_transforms$, JSON.stringify);\nexport const barnsley_transforms = (a) => {\n  return barnsley_transforms$m(a);\n  // eslint-disable-next-line no-undef\n  barnsley_transforms$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end barnsley_transforms memo-loader code //////////\n\n\n\n////////// start winning_transform_values memo-loader code //////////\n//const winning_transform_values$m = memoize(999999, isEqual)(winning_transform_values$);\nexport const winning_transform_values$m = memoize(winning_transform_values$, JSON.stringify);\nexport const winning_transform_values = (a) => {\n  return winning_transform_values$m(a);\n  // eslint-disable-next-line no-undef\n  winning_transform_values$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end winning_transform_values memo-loader code //////////\n\n\n\n////////// start i memo-loader code //////////\n//const i$m = memoize(999999, isEqual)(i$);\nexport const i$m = memoize(i$, JSON.stringify);\nexport const i = (a) => {\n  return i$m(a);\n  // eslint-disable-next-line no-undef\n  i$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end i memo-loader code //////////\n\n\n\n////////// start winner memo-loader code //////////\n//const winner$m = memoize(999999, isEqual)(winner$);\nexport const winner$m = memoize(winner$, JSON.stringify);\nexport const winner = (a) => {\n  return winner$m(a);\n  // eslint-disable-next-line no-undef\n  winner$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end winner memo-loader code //////////\n\n\n\n////////// start barnsley_0 memo-loader code //////////\n//const barnsley_0$m = memoize(999999, isEqual)(barnsley_0$);\nexport const barnsley_0$m = memoize(barnsley_0$, JSON.stringify);\nexport const barnsley_0 = (a) => {\n  return barnsley_0$m(a);\n  // eslint-disable-next-line no-undef\n  barnsley_0$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end barnsley_0 memo-loader code //////////\n\n\n\n////////// start barnsley_1 memo-loader code //////////\n//const barnsley_1$m = memoize(999999, isEqual)(barnsley_1$);\nexport const barnsley_1$m = memoize(barnsley_1$, JSON.stringify);\nexport const barnsley_1 = (a) => {\n  return barnsley_1$m(a);\n  // eslint-disable-next-line no-undef\n  barnsley_1$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end barnsley_1 memo-loader code //////////\n\n\n\n////////// start barnsley_2 memo-loader code //////////\n//const barnsley_2$m = memoize(999999, isEqual)(barnsley_2$);\nexport const barnsley_2$m = memoize(barnsley_2$, JSON.stringify);\nexport const barnsley_2 = (a) => {\n  return barnsley_2$m(a);\n  // eslint-disable-next-line no-undef\n  barnsley_2$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end barnsley_2 memo-loader code //////////\n\n\n\n////////// start barnsley_3 memo-loader code //////////\n//const barnsley_3$m = memoize(999999, isEqual)(barnsley_3$);\nexport const barnsley_3$m = memoize(barnsley_3$, JSON.stringify);\nexport const barnsley_3 = (a) => {\n  return barnsley_3$m(a);\n  // eslint-disable-next-line no-undef\n  barnsley_3$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end barnsley_3 memo-loader code //////////\n\n\n\n////////// start barnsley_4 memo-loader code //////////\n//const barnsley_4$m = memoize(999999, isEqual)(barnsley_4$);\nexport const barnsley_4$m = memoize(barnsley_4$, JSON.stringify);\nexport const barnsley_4 = (a) => {\n  return barnsley_4$m(a);\n  // eslint-disable-next-line no-undef\n  barnsley_4$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end barnsley_4 memo-loader code //////////\n\n\n\n////////// start barnsley_5 memo-loader code //////////\n//const barnsley_5$m = memoize(999999, isEqual)(barnsley_5$);\nexport const barnsley_5$m = memoize(barnsley_5$, JSON.stringify);\nexport const barnsley_5 = (a) => {\n  return barnsley_5$m(a);\n  // eslint-disable-next-line no-undef\n  barnsley_5$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end barnsley_5 memo-loader code //////////\n\n\n\n////////// start x memo-loader code //////////\n//const x$m = memoize(999999, isEqual)(x$);\nexport const x$m = memoize(x$, JSON.stringify);\nexport const x = (a) => {\n  return x$m(a);\n  // eslint-disable-next-line no-undef\n  x$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end x memo-loader code //////////\n\n\n\n////////// start y memo-loader code //////////\n//const y$m = memoize(999999, isEqual)(y$);\nexport const y$m = memoize(y$, JSON.stringify);\nexport const y = (a) => {\n  return y$m(a);\n  // eslint-disable-next-line no-undef\n  y$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end y memo-loader code //////////\n\n\n    "],"mappings":"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"}