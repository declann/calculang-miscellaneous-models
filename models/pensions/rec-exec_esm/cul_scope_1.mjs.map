{"version":3,"names":["age","age_in","age_0","retirement_age","actuals_in","retirement_age_actual","salary_0","salary_inflation_rate","empee_contribution_rate","unit_growth_rate","fund_value_0","contribution_charge","emper_contribution_rate","income_tax","fund_value","rec_step_in","age_opening_in","age_opening_closing_offset_in","age_closing_in","unit_balance","unit_price","unit_allocation","empee_contribution","emper_contribution","salary","accumulated_empee_contributions","pension_tax_relief_ratio","empee_contribution_tax_relief","gross_salary_in","tax_credits_in","pension_contribution_in","projected_fund_value"],"sources":["projected.cul.js"],"sourcesContent":["export const age = () => age_in;\nexport const age_0 = () => 30;\nexport const retirement_age = () => retirement_age_actual();\nexport const salary_0 = () => 50000;\nexport const salary_inflation_rate = () => 0.02;\nexport const empee_contribution_rate = () => 0.1;\nexport const unit_growth_rate = () => 0.05;\nexport const fund_value_0 = () => 0;\nexport const contribution_charge = () => 0.04;\nexport const emper_contribution_rate = () => 0.10;\n\n// disclaimer: This is a work-in-progress model released for some calculang/tooling demonstration purposes and numbers shouldn't be relied upon; there are known model issues.\n\n// this model should prob. be broken into some modular pieces, but it isn't because it definitely needs memoisation, which is currently only working for non-modular models\n\n// todo add timing comments\n\nimport { income_tax } from \"./simple-incometax.cul\";\nexport { income_tax };\n\nexport const fund_value = () => unit_balance() * unit_price(); // not allowing for multiple funds now\n\nexport const unit_balance = () => {\n  if (age() <= age_0() - 1) return fund_value_0() / unit_price();\n  else return unit_balance({ age_in: age() - 1 }) + unit_allocation();\n  // timing = premium received at start of year and allocated immediately\n};\n\nexport const unit_allocation = () =>\n  ((empee_contribution() + emper_contribution()) *\n    (1 - contribution_charge())) /\n  unit_price(); // todo, AVCs?\n\nexport const unit_price = () => {\n  if (age() <= age_0()) return 1;\n  else return unit_price({ age_in: age() - 1 }) * (1 + unit_growth_rate());\n};\n\nexport const empee_contribution = () => {\n  if (age() <= age_0() - 1 || age() == retirement_age()) return 0;\n  else return salary({ age_in: age() - 1 }) * empee_contribution_rate();\n};\n\nexport const accumulated_empee_contributions = () => {\n  if (age() == age_0() - 1) return 0;\n  else\n    return (\n      accumulated_empee_contributions({ age_in: age() - 1 }) +\n      empee_contribution()\n    );\n};\n\nexport const pension_tax_relief_ratio = () =>\n  empee_contribution_tax_relief() / empee_contribution();\n\nexport const empee_contribution_tax_relief = () =>\n  income_tax({\n    gross_salary_in: salary({ age_in: age() - 1 }),\n    tax_credits_in: 3000,\n    pension_contribution_in: 0,\n  }) -\n  income_tax({\n    gross_salary_in: salary({ age_in: age() - 1 }),\n    tax_credits_in: 3000,\n    pension_contribution_in: empee_contribution(),\n  });\n\n// affected by bug: depends on gross_salary_in, for some reason\n// issue #102\n/*export const accumulated_empee_contribution_tax_relief = () => {\n  if (age() == age_0() - 1) return 0;\n  else\n    return (\n      accumulated_empee_contribution_tax_relief({ age_in: age() - 1 }) +\n      empee_contribution_tax_relief()\n    );\n};*/\n\nexport const emper_contribution = () => {\n  if (age() <= age_0() - 1 || age() == retirement_age()) return 0;\n  else return salary({ age_in: age() - 1 }) * emper_contribution_rate();\n};\n\nexport const salary = () => {\n  // at end of year\n  if (age() <= age_0() - 1) return salary_0();\n  else if (age() >= retirement_age()) return 0;\n  else return salary({ age_in: age() - 1 }) * (1 + salary_inflation_rate()); // < age_0 = undefined, any way/use to capture this statically?\n};\n\nexport const projected_fund_value = () =>\n  // at retirement:\n  fund_value({ age_in: retirement_age() });\n\n// explicit inputs ::"],"mappings":"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"}