{"version":3,"sources":["suncalc.cul.js"],"names":["date","date_in","lat","lat_in","lng","lng_in","dayMs","J1970","J2000","rad","Math","PI","sin","cos","tan","asin","atan","atan2","acos","e","lw","phi","julian_1","valueOf","l","l_in","b","b_in","right_ascension","declination","dec","dec_in","azimuth","obj_in","H","altitude","sidereal_time","obj","solar_mean_anomaly","console","error","equation_of_center","perihelion_of_earth","ecliptic_longitude","declination_L0","right_ascension_L0","azimuth_obj","altitude_obj"],"mappings":"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","sourcesContent":["// based on formulae in SunCalc,\n// https://github.com/mourner/suncalc\n// SunCalc is (c) Vladimir Agafonkin (http://agafonkin.com/en)\n\n// SunCalc readme:\n// \"Most calculations are based on the formulas given in the excellent Astronomy Answers articles\n// about [position of the sun](http://aa.quae.nl/en/reken/zonpositie.html)\n// and [the planets](http://aa.quae.nl/en/reken/hemelpositie.html).\"\n\n// ideas: compare/rec against Mike Bostock solar-calculator module on npm, and/or NOAA s/s on which solar-calculator based.\n// + https://observablehq.com/@mourner/sun-position-in-900-bytes\n//   ^ \"more precise\" \"based on formulas from the 2nd edition of [Jean Meeus's \"Astronomical Algorithms\" book](https://www.willbell.com/math/mc1.htm)\" \n\nexport const date = ({ date_in }) => date_in;\nexport const lat = ({ lat_in }) => lat_in;\nexport const lng = ({ lng_in }) => lng_in;\n\n// \"date/time constants and conversions\"\nexport const dayMs = ({}) => 1000 * 60 * 60 * 24;\nexport const J1970 = ({}) => 2440588;\nexport const J2000 = ({}) => 2451545;\nexport const rad = ({}) => Math.PI / 180;\n\n// bad form?\nvar PI = Math.PI,\nsin = Math.sin,\ncos = Math.cos,\ntan = Math.tan,\nasin = Math.asin,\natan = Math.atan2,\nacos = Math.acos;\n\nexport const e = ({}) => rad({}) * 23.4397; // obliquity of the Earth\n\nexport const lw = ({ lng_in }) => rad({}) * -lng({ lng_in });\nexport const phi = ({ lat_in }) => rad({}) * lat({ lat_in });\n\nexport const julian_1 = ({ date_in }) => date({ date_in }).valueOf() / dayMs({}) - 0.5 + J1970({}) - J2000({}); // fn on date_in\n\n//// right_ascension, declination locked input structure\nexport const l = ({ l_in }) => l_in;\nexport const b = ({ b_in }) => b_in;\n\nexport const right_ascension = ({ l_in, b_in }) =>\natan(sin(l({ l_in })) * cos(e({})) - tan(b({ b_in })) * sin(e({})), cos(l({ l_in })));\nexport const declination = ({ b_in, l_in }) =>\nasin(sin(b({ b_in })) * cos(e({})) + cos(b({ b_in })) * sin(e({})) * sin(l({ l_in })));\n\n/// azimuth, altitude ~~locked~~ input structure\n//export const H = () => H_in;\n//export const phi = () => phi_in;\nexport const dec = ({ dec_in }) => dec_in;\n\nexport const azimuth = ({ date_in, lng_in, obj_in, lat_in, dec_in }) =>\natan(sin(H({ date_in, lng_in, obj_in })), cos(H({ date_in, lng_in, obj_in })) * sin(phi({ lat_in })) - tan(dec({ dec_in })) * cos(phi({ lat_in }))); // some refactors to function might help here\nexport const altitude = ({ lat_in, dec_in, date_in, lng_in, obj_in }) =>\nasin(sin(phi({ lat_in })) * sin(dec({ dec_in })) + cos(phi({ lat_in })) * cos(dec({ dec_in })) * cos(H({ date_in, lng_in, obj_in })));\n\n//export const lw = () => lw_in;\nexport const sidereal_time = ({ date_in, lng_in }) =>\nrad({}) * (280.16 + 360.9856235 * julian_1({ date_in })) - lw({ lng_in });\n\n// abstract sun, moon values via obj_in\nexport const obj = ({ obj_in }) => obj_in;\nexport const solar_mean_anomaly = ({ obj_in, date_in }) => {\n  if (obj({ obj_in }) == 'sun') return rad({}) * (357.5291 + 0.98560028 * julian_1({ date_in }));else\n  if (obj({ obj_in }) == 'moon') return rad({}) * (134.963 + 13.064993 * julian_1({ date_in }));else\n  console.error('obj not sun or moon');\n};\n\nexport const equation_of_center = ({ obj_in, date_in }) =>\nrad({}) * (\n1.9148 * sin(solar_mean_anomaly({ obj_in, date_in })) +\n0.02 * sin(2 * solar_mean_anomaly({ obj_in, date_in })) +\n0.0003 * sin(3 * solar_mean_anomaly({ obj_in, date_in })));\n\nexport const perihelion_of_earth = ({}) => rad({}) * 102.9372;\n\nexport const ecliptic_longitude = ({ obj_in, date_in }) =>\nMath.PI + solar_mean_anomaly({ obj_in, date_in }) + equation_of_center({ obj_in, date_in }) + perihelion_of_earth({});\n\n// sunCoords outputs (still intermediate)\n// naming convention? (L, 0) / _obj?\nexport const declination_L0 = ({ obj_in, date_in }) =>\ndeclination({ l_in: ecliptic_longitude({ obj_in, date_in }), b_in: 0 });\nexport const right_ascension_L0 = ({ obj_in, date_in }) =>\nright_ascension({ l_in: ecliptic_longitude({ obj_in, date_in }), b_in: 0 });\n\nexport const H = ({ date_in, lng_in, obj_in }) => sidereal_time({ date_in, lng_in }) - right_ascension_L0({ obj_in, date_in });\n\n// outputs\nexport const azimuth_obj = ({ date_in, lng_in, obj_in, lat_in }) => azimuth({ date_in, lng_in, obj_in, lat_in, dec_in: declination_L0({ obj_in, date_in }) });\nexport const altitude_obj = ({ lat_in, date_in, lng_in, obj_in }) => altitude({ lat_in, date_in, lng_in, obj_in, dec_in: declination_L0({ obj_in, date_in }) });\n\n// moon calcs in suncalc have an astroRefraction param I didn't build?\n// also some other error?\n// but sun recs closer from a few tests"]}