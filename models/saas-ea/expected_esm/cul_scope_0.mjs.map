{"version":3,"sources":["expected.cul.js"],"names":["subs_growth_pc","subs_growth_pc_in","subs_churn_pc","subs_churn_pc_in","subs_0","subs_0_in","year","year_in","CAC","CAC_in","subs_new","subs","subs_churned","expenses","revenue","profit"],"mappings":"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","sourcesContent":["export const subs_growth_pc = ({ subs_growth_pc_in }) => subs_growth_pc_in;\nexport const subs_churn_pc = ({ subs_churn_pc_in }) => subs_churn_pc_in;\nexport const subs_0 = ({ subs_0_in }) => subs_0_in; // subs at start of year 0\nexport const year = ({ year_in }) => year_in;\nexport const CAC = ({ CAC_in }) => CAC_in;\n\nexport const subs_new = ({ year_in, subs_0_in, subs_churn_pc_in, subs_growth_pc_in }) =>\n// its hard to find the year boundary needed here when I add expenses to model, when it worked without. Table and good error reporting is very important\nyear({ year_in }) < 0 ? 0 : subs({ subs_0_in, subs_growth_pc_in, subs_churn_pc_in, year_in: year({ year_in }) - 1 }) * (subs_growth_pc({ subs_growth_pc_in }) / 100);\n\nexport const subs_churned = ({ year_in, subs_0_in, subs_growth_pc_in, subs_churn_pc_in }) =>\n(subs({ subs_0_in, subs_growth_pc_in, subs_churn_pc_in, year_in: year({ year_in }) - 1 }) + subs_new({ year_in, subs_0_in, subs_churn_pc_in, subs_growth_pc_in })) * subs_churn_pc({ subs_churn_pc_in }) / 100; // churn assumption also applies to new subs\n\n// subs at end = prev subs at end + new subs@yr - churned subs@yr\nexport const subs = ({ year_in, subs_0_in, subs_growth_pc_in, subs_churn_pc_in }) => {\n  if (year({ year_in }) < 0) return subs_0({ subs_0_in });else\n  return subs({ subs_0_in, subs_growth_pc_in, subs_churn_pc_in, year_in: year({ year_in }) - 1 }) + subs_new({ year_in, subs_0_in, subs_churn_pc_in, subs_growth_pc_in }) - subs_churned({ year_in, subs_0_in, subs_growth_pc_in, subs_churn_pc_in });\n}; // => can project subs given subs_0, growth and churn rates\n\nexport const expenses = ({ year_in, subs_0_in, subs_churn_pc_in, subs_growth_pc_in, CAC_in }) => subs_new({ year_in, subs_0_in, subs_churn_pc_in, subs_growth_pc_in }) * CAC({ CAC_in }); // error?\nexport const revenue = ({ year_in, subs_0_in, subs_growth_pc_in, subs_churn_pc_in }) => subs({ year_in, subs_0_in, subs_growth_pc_in, subs_churn_pc_in }) * 100;\nexport const profit = ({ year_in, subs_0_in, subs_growth_pc_in, subs_churn_pc_in, CAC_in }) => revenue({ year_in, subs_0_in, subs_growth_pc_in, subs_churn_pc_in }) - expenses({ year_in, subs_0_in, subs_churn_pc_in, subs_growth_pc_in, CAC_in });"]}