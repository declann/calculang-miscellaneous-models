{"version":3,"names":["subs_churned_experience","subs_new_experience","subs_ea","ea_end","ea_start","subs_churned","subs_new","subs_churned_actual_to","subs_new_actual_to","subs_churned_actual","subs_new_actual","subs_0","actuals_table","subs_growth_pc","subs_growth_pc_in","subs_churn_pc","subs_churn_pc_in","subs_0_","subs_0_in","year","year_in","CAC","CAC_in","subs_new_","subs_new_actual_to_in","actuals_table_in","subs_churned_actual_to_in","subs","subs_churned_","expenses","revenue","profit"],"sources":["expected.cul.js"],"sourcesContent":["import { subs_churned_experience } from \"./rec.cul.js\";import { subs_new_experience } from \"./rec.cul.js\";import { subs_ea } from \"./rec.cul.js\";import { ea_end } from \"./rec.cul.js\";import { ea_start } from \"./rec.cul.js\";import { subs_churned } from \"./rec.cul.js\";import { subs_new } from \"./rec.cul.js\";import { subs_churned_actual_to } from \"./rec.cul.js\";import { subs_new_actual_to } from \"./rec.cul.js\";import { subs_churned_actual } from \"./rec.cul.js\";import { subs_new_actual } from \"./rec.cul.js\";import { subs_0 } from \"./rec.cul.js\";import { actuals_table } from \"./rec.cul.js\";export const subs_growth_pc = ({ subs_growth_pc_in }) => subs_growth_pc_in;\nexport const subs_churn_pc = ({ subs_churn_pc_in }) => subs_churn_pc_in;\nexport const subs_0_ = ({ subs_0_in }) => subs_0_in; // subs at start of year 0\nexport const year = ({ year_in }) => year_in;\nexport const CAC = ({ CAC_in }) => CAC_in;\n\nexport const subs_new_ = ({ year_in, subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_churned_actual_to_in, subs_churn_pc_in, subs_growth_pc_in }) =>\n// its hard to find the year boundary needed here when I add expenses to model, when it worked without. Table and good error reporting is very important\nyear({ year_in }) < 0 ? 0 : subs({ subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_growth_pc_in, subs_churned_actual_to_in, subs_churn_pc_in, year_in: year({ year_in }) - 1 }) * (subs_growth_pc({ subs_growth_pc_in }) / 100);\n\nexport const subs_churned_ = ({ year_in, subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_growth_pc_in, subs_churned_actual_to_in, subs_churn_pc_in }) =>\n(subs({ subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_growth_pc_in, subs_churned_actual_to_in, subs_churn_pc_in, year_in: year({ year_in }) - 1 }) + subs_new({ year_in, subs_new_actual_to_in, actuals_table_in, subs_0_in, subs_churned_actual_to_in, subs_churn_pc_in, subs_growth_pc_in })) * subs_churn_pc({ subs_churn_pc_in }) / 100; // churn assumption also applies to new subs\n\n// subs at end = prev subs at end + new subs@yr - churned subs@yr\nexport const subs = ({ year_in, subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_growth_pc_in, subs_churned_actual_to_in, subs_churn_pc_in }) => {\n  if (year({ year_in }) < 0) return subs_0({ subs_0_in });else\n  return subs({ subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_growth_pc_in, subs_churned_actual_to_in, subs_churn_pc_in, year_in: year({ year_in }) - 1 }) + subs_new({ year_in, subs_new_actual_to_in, actuals_table_in, subs_0_in, subs_churned_actual_to_in, subs_churn_pc_in, subs_growth_pc_in }) - subs_churned({ year_in, subs_churned_actual_to_in, actuals_table_in, subs_0_in, subs_new_actual_to_in, subs_growth_pc_in, subs_churn_pc_in });\n}; // => can project subs given subs_0, growth and churn rates\n\nexport const expenses = ({ year_in, subs_new_actual_to_in, actuals_table_in, subs_0_in, subs_churned_actual_to_in, subs_churn_pc_in, subs_growth_pc_in, CAC_in }) => subs_new({ year_in, subs_new_actual_to_in, actuals_table_in, subs_0_in, subs_churned_actual_to_in, subs_churn_pc_in, subs_growth_pc_in }) * CAC({ CAC_in }); // error?\nexport const revenue = ({ year_in, subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_growth_pc_in, subs_churned_actual_to_in, subs_churn_pc_in }) => subs({ year_in, subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_growth_pc_in, subs_churned_actual_to_in, subs_churn_pc_in }) * 100;\nexport const profit = ({ year_in, subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_growth_pc_in, subs_churned_actual_to_in, subs_churn_pc_in, CAC_in }) => revenue({ year_in, subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_growth_pc_in, subs_churned_actual_to_in, subs_churn_pc_in }) - expenses({ year_in, subs_new_actual_to_in, actuals_table_in, subs_0_in, subs_churned_actual_to_in, subs_churn_pc_in, subs_growth_pc_in, CAC_in });"],"mappings":"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"}