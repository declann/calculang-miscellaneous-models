{"version":3,"sources":["expected.cul.js"],"names":["subs_churned_experience","subs_new_experience","subs_ea","ea_end","ea_start","subs_churned","subs_new","subs_churned_actual_to","subs_new_actual_to","subs_churned_actual","subs_new_actual","subs_0","actuals_table","subs_growth_pc","subs_growth_pc_in","subs_churn_pc","subs_churn_pc_in","subs_0_","subs_0_in","year","year_in","CAC","CAC_in","subs_new_","subs_new_actual_to_in","actuals_table_in","subs_churned_actual_to_in","subs","subs_churned_","expenses","revenue","profit"],"mappings":"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","sourcesContent":["import { subs_churned_experience } from \"./rec.cul.js\";import { subs_new_experience } from \"./rec.cul.js\";import { subs_ea } from \"./rec.cul.js\";import { ea_end } from \"./rec.cul.js\";import { ea_start } from \"./rec.cul.js\";import { subs_churned } from \"./rec.cul.js\";import { subs_new } from \"./rec.cul.js\";import { subs_churned_actual_to } from \"./rec.cul.js\";import { subs_new_actual_to } from \"./rec.cul.js\";import { subs_churned_actual } from \"./rec.cul.js\";import { subs_new_actual } from \"./rec.cul.js\";import { subs_0 } from \"./rec.cul.js\";import { actuals_table } from \"./rec.cul.js\";export const subs_growth_pc = ({ subs_growth_pc_in }) => subs_growth_pc_in;\nexport const subs_churn_pc = ({ subs_churn_pc_in }) => subs_churn_pc_in;\nexport const subs_0_ = ({ subs_0_in }) => subs_0_in; // subs at start of year 0\nexport const year = ({ year_in }) => year_in;\nexport const CAC = ({ CAC_in }) => CAC_in;\n\nexport const subs_new_ = ({ year_in, subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_churned_actual_to_in, subs_churn_pc_in, subs_growth_pc_in }) =>\n// its hard to find the year boundary needed here when I add expenses to model, when it worked without. Table and good error reporting is very important\nyear({ year_in }) < 0 ? 0 : subs({ subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_growth_pc_in, subs_churned_actual_to_in, subs_churn_pc_in, year_in: year({ year_in }) - 1 }) * (subs_growth_pc({ subs_growth_pc_in }) / 100);\n\nexport const subs_churned_ = ({ year_in, subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_growth_pc_in, subs_churned_actual_to_in, subs_churn_pc_in }) =>\n(subs({ subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_growth_pc_in, subs_churned_actual_to_in, subs_churn_pc_in, year_in: year({ year_in }) - 1 }) + subs_new({ year_in, subs_new_actual_to_in, actuals_table_in, subs_0_in, subs_churned_actual_to_in, subs_churn_pc_in, subs_growth_pc_in })) * subs_churn_pc({ subs_churn_pc_in }) / 100; // churn assumption also applies to new subs\n\n// subs at end = prev subs at end + new subs@yr - churned subs@yr\nexport const subs = ({ year_in, subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_growth_pc_in, subs_churned_actual_to_in, subs_churn_pc_in }) => {\n  if (year({ year_in }) < 0) return subs_0({ subs_0_in });else\n  return subs({ subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_growth_pc_in, subs_churned_actual_to_in, subs_churn_pc_in, year_in: year({ year_in }) - 1 }) + subs_new({ year_in, subs_new_actual_to_in, actuals_table_in, subs_0_in, subs_churned_actual_to_in, subs_churn_pc_in, subs_growth_pc_in }) - subs_churned({ year_in, subs_churned_actual_to_in, actuals_table_in, subs_0_in, subs_new_actual_to_in, subs_growth_pc_in, subs_churn_pc_in });\n}; // => can project subs given subs_0, growth and churn rates\n\nexport const expenses = ({ year_in, subs_new_actual_to_in, actuals_table_in, subs_0_in, subs_churned_actual_to_in, subs_churn_pc_in, subs_growth_pc_in, CAC_in }) => subs_new({ year_in, subs_new_actual_to_in, actuals_table_in, subs_0_in, subs_churned_actual_to_in, subs_churn_pc_in, subs_growth_pc_in }) * CAC({ CAC_in }); // error?\nexport const revenue = ({ year_in, subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_growth_pc_in, subs_churned_actual_to_in, subs_churn_pc_in }) => subs({ year_in, subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_growth_pc_in, subs_churned_actual_to_in, subs_churn_pc_in }) * 100;\nexport const profit = ({ year_in, subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_growth_pc_in, subs_churned_actual_to_in, subs_churn_pc_in, CAC_in }) => revenue({ year_in, subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_growth_pc_in, subs_churned_actual_to_in, subs_churn_pc_in }) - expenses({ year_in, subs_new_actual_to_in, actuals_table_in, subs_0_in, subs_churned_actual_to_in, subs_churn_pc_in, subs_growth_pc_in, CAC_in });"]}