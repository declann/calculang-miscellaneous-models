{"version":3,"sources":["rec.cul.js"],"names":["subs","subs_new_","subs_new_expected","subs_churned_","subs_churned_expected","year","revenue","expenses","profit","CAC","actuals_table","actuals_table_in","subs_0","subs_0_in","subs_new_actual","year_in","subs_churned_actual","subs_new_actual_to","subs_new_actual_to_in","subs_churned_actual_to","subs_churned_actual_to_in","subs_new","subs_churn_pc_in","subs_growth_pc_in","subs_churned","ea_start","ea_start_in","ea_end","ea_end_in","subs_ea","type","function","value","subs_new_experience","subs_churned_experience"],"mappings":"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","sourcesContent":["import {\nsubs,\nsubs_new_ as subs_new_expected,\nsubs_churned_ as subs_churned_expected,\nyear,\nrevenue,\nexpenses,\nprofit,\nCAC } from\n\"./expected.cul.js?cul_scope_id=1&cul_parent_scope_id=0\";\nexport { subs, year };\nexport { revenue, expenses, profit, CAC }; // necessary\n\nexport const actuals_table = ({ actuals_table_in }) => actuals_table_in;\n\n// actuals\nexport const subs_0 = ({ subs_0_in }) => subs_0_in; // start at 100 subs (this line now redundant!)\nexport const subs_new_actual = ({ actuals_table_in, year_in }) =>\nactuals_table({ actuals_table_in })[year({ year_in }) + 1].subs_new_actual;\nexport const subs_churned_actual = ({ actuals_table_in, year_in }) =>\nactuals_table({ actuals_table_in })[year({ year_in }) + 1].subs_churned_actual;\n\n// year up to which actual data should be used, -1=use only expecteds\nexport const subs_new_actual_to = ({ subs_new_actual_to_in }) => subs_new_actual_to_in;\nexport const subs_churned_actual_to = ({ subs_churned_actual_to_in }) => subs_churned_actual_to_in;\n\n// interleave actuals into projections: this rebases expd using actuals?\nexport const subs_new = ({ year_in, subs_new_actual_to_in, actuals_table_in, subs_0_in, subs_churned_actual_to_in, subs_churn_pc_in, subs_growth_pc_in }) => {\n  if (year({ year_in }) <= subs_new_actual_to({ subs_new_actual_to_in })) return subs_new_actual({ actuals_table_in, year_in });else\n  return subs_new_expected({ year_in, subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_churned_actual_to_in, subs_churn_pc_in, subs_growth_pc_in }); // this is an override which uses itself: but it doesn't compile correctly, check memo-loader version?\n};\nexport const subs_churned = ({ year_in, subs_churned_actual_to_in, actuals_table_in, subs_0_in, subs_new_actual_to_in, subs_growth_pc_in, subs_churn_pc_in }) => {\n  if (year({ year_in }) <= subs_churned_actual_to({ subs_churned_actual_to_in })) return subs_churned_actual({ actuals_table_in, year_in });else\n  return subs_churned_expected({ year_in, subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_growth_pc_in, subs_churned_actual_to_in, subs_churn_pc_in });\n};\n\n// move away from experience.\n// just look at projections\n// => subs({year:x,actuals:x})\n\nexport const ea_start = ({ ea_start_in }) => ea_start_in;\nexport const ea_end = ({ ea_end_in }) => ea_end_in;\n\nexport const subs_ea = ({ subs_0_in, actuals_table_in, subs_growth_pc_in, subs_churn_pc_in, ea_end_in, ea_start_in }) => [\n{\n  type: 'Expected',\n  function: 'subs',\n  value: subs({ subs_0_in, actuals_table_in, subs_growth_pc_in, subs_churn_pc_in,\n    year_in: ea_end({ ea_end_in }),\n    subs_new_actual_to_in: ea_start({ ea_start_in }),\n    subs_churned_actual_to_in: ea_start({ ea_start_in }) }) },\n\n\n{\n  type: '-> Actual Sales', // this impact will include expd churn on sales impact, alt. split could use 0 decrements and create a balancing 'confounding' amount\n  function: 'subs',\n  value: subs({ subs_0_in, actuals_table_in, subs_growth_pc_in, subs_churn_pc_in,\n    year_in: ea_end({ ea_end_in }),\n    subs_new_actual_to_in: ea_end({ ea_end_in }),\n    subs_churned_actual_to_in: ea_start({ ea_start_in }) }) },\n\n\n{\n  type: '-> Actual Churn (=Actual)',\n  function: 'subs',\n  value: subs({ subs_0_in, actuals_table_in, subs_growth_pc_in, subs_churn_pc_in,\n    year_in: ea_end({ ea_end_in }),\n    subs_new_actual_to_in: ea_end({ ea_end_in }),\n    subs_churned_actual_to_in: ea_end({ ea_end_in }) }) }];\n\n\n\n// todo use an impacts abstraction or move subtraction to VL\n\n// reconcile actual to expected, experience=A-E\n// in year\n// this should be abstracted using a table for clarity\nexport const subs_new_experience = ({ year_in, actuals_table_in, subs_0_in, subs_churn_pc_in, subs_growth_pc_in }) => {\n  // now a fn on year\n  const subs_churned_actual_to_in = year({ year_in }) - 1;\n  return (\n    subs_new({ year_in, actuals_table_in, subs_0_in, subs_churned_actual_to_in, subs_churn_pc_in, subs_growth_pc_in, subs_new_actual_to_in: year({ year_in }) }) -\n    subs_new({ year_in, actuals_table_in, subs_0_in, subs_churned_actual_to_in, subs_churn_pc_in, subs_growth_pc_in, subs_new_actual_to_in: year({ year_in }) - 1 }));\n\n};\n\nexport const subs_churned_experience = ({ year_in, actuals_table_in, subs_0_in, subs_growth_pc_in, subs_churn_pc_in }) => {\n  // now a fn on year\n  const subs_new_actual_to_in = year({ year_in });\n  return (\n    subs_churned({ year_in, actuals_table_in, subs_0_in, subs_new_actual_to_in, subs_growth_pc_in, subs_churn_pc_in, subs_churned_actual_to_in: year({ year_in }) }) -\n    subs_churned({ year_in, actuals_table_in, subs_0_in, subs_new_actual_to_in, subs_growth_pc_in, subs_churn_pc_in, subs_churned_actual_to_in: year({ year_in }) - 1 }));\n  // todo project, constrain rec ordering somewhere\n};\n\n// re introspection: devtools can probably do this? But messy at that stage, so might not be an option\n// export to excel with hacked formulae (=7+0*E8) for relationships is probably a nice short-term feature until I get the experience outside\n// hacked formulae can easily be replaced by proper conversions if I convert JS to Excel in fut\n// maybe this is important for explanation phase, more impt than technical/memo-loader?"]}