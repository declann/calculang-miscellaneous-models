{"version":3,"names":["subs","subs_new_","subs_new_expected","subs_churned_","subs_churned_expected","year","revenue","expenses","profit","CAC","actuals_table","actuals_table_in","subs_0","subs_0_in","subs_new_actual","year_in","subs_churned_actual","subs_new_actual_to","subs_new_actual_to_in","subs_churned_actual_to","subs_churned_actual_to_in","subs_new","subs_churn_pc_in","subs_growth_pc_in","subs_churned","ea_start","ea_start_in","ea_end","ea_end_in","subs_ea","type","function","value","subs_new_experience","subs_churned_experience"],"sources":["rec.cul.js"],"sourcesContent":["import {\nsubs,\nsubs_new_ as subs_new_expected,\nsubs_churned_ as subs_churned_expected,\nyear,\nrevenue,\nexpenses,\nprofit,\nCAC } from\n\"./expected.cul.js?cul_scope_id=1&cul_parent_scope_id=0\";\nexport { subs, year };\nexport { revenue, expenses, profit, CAC }; // necessary\n\nexport const actuals_table = ({ actuals_table_in }) => actuals_table_in;\n\n// actuals\nexport const subs_0 = ({ subs_0_in }) => subs_0_in; // start at 100 subs (this line now redundant!)\nexport const subs_new_actual = ({ actuals_table_in, year_in }) =>\nactuals_table({ actuals_table_in })[year({ year_in }) + 1].subs_new_actual;\nexport const subs_churned_actual = ({ actuals_table_in, year_in }) =>\nactuals_table({ actuals_table_in })[year({ year_in }) + 1].subs_churned_actual;\n\n// year up to which actual data should be used, -1=use only expecteds\nexport const subs_new_actual_to = ({ subs_new_actual_to_in }) => subs_new_actual_to_in;\nexport const subs_churned_actual_to = ({ subs_churned_actual_to_in }) => subs_churned_actual_to_in;\n\n// interleave actuals into projections: this rebases expd using actuals?\nexport const subs_new = ({ year_in, subs_new_actual_to_in, actuals_table_in, subs_0_in, subs_churned_actual_to_in, subs_churn_pc_in, subs_growth_pc_in }) => {\n  if (year({ year_in }) <= subs_new_actual_to({ subs_new_actual_to_in })) return subs_new_actual({ actuals_table_in, year_in });else\n  return subs_new_expected({ year_in, subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_churned_actual_to_in, subs_churn_pc_in, subs_growth_pc_in }); // this is an override which uses itself: but it doesn't compile correctly, check memo-loader version?\n};\nexport const subs_churned = ({ year_in, subs_churned_actual_to_in, actuals_table_in, subs_0_in, subs_new_actual_to_in, subs_growth_pc_in, subs_churn_pc_in }) => {\n  if (year({ year_in }) <= subs_churned_actual_to({ subs_churned_actual_to_in })) return subs_churned_actual({ actuals_table_in, year_in });else\n  return subs_churned_expected({ year_in, subs_0_in, subs_new_actual_to_in, actuals_table_in, subs_growth_pc_in, subs_churned_actual_to_in, subs_churn_pc_in });\n};\n\n// move away from experience.\n// just look at projections\n// => subs({year:x,actuals:x})\n\nexport const ea_start = ({ ea_start_in }) => ea_start_in;\nexport const ea_end = ({ ea_end_in }) => ea_end_in;\n\nexport const subs_ea = ({ subs_0_in, actuals_table_in, subs_growth_pc_in, subs_churn_pc_in, ea_end_in, ea_start_in }) => [\n{\n  type: 'Expected',\n  function: 'subs',\n  value: subs({ subs_0_in, actuals_table_in, subs_growth_pc_in, subs_churn_pc_in,\n    year_in: ea_end({ ea_end_in }),\n    subs_new_actual_to_in: ea_start({ ea_start_in }),\n    subs_churned_actual_to_in: ea_start({ ea_start_in }) })\n\n},\n{\n  type: '-> Actual Sales', // this impact will include expd churn on sales impact, alt. split could use 0 decrements and create a balancing 'confounding' amount\n  function: 'subs',\n  value: subs({ subs_0_in, actuals_table_in, subs_growth_pc_in, subs_churn_pc_in,\n    year_in: ea_end({ ea_end_in }),\n    subs_new_actual_to_in: ea_end({ ea_end_in }),\n    subs_churned_actual_to_in: ea_start({ ea_start_in }) })\n\n},\n{\n  type: '-> Actual Churn (=Actual)',\n  function: 'subs',\n  value: subs({ subs_0_in, actuals_table_in, subs_growth_pc_in, subs_churn_pc_in,\n    year_in: ea_end({ ea_end_in }),\n    subs_new_actual_to_in: ea_end({ ea_end_in }),\n    subs_churned_actual_to_in: ea_end({ ea_end_in }) })\n\n}];\n\n// todo use an impacts abstraction or move subtraction to VL\n\n// reconcile actual to expected, experience=A-E\n// in year\n// this should be abstracted using a table for clarity\nexport const subs_new_experience = ({ year_in, actuals_table_in, subs_0_in, subs_churn_pc_in, subs_growth_pc_in }) => {\n  // now a fn on year\n  const subs_churned_actual_to_in = year({ year_in }) - 1;\n  return (\n    subs_new({ year_in, actuals_table_in, subs_0_in, subs_churned_actual_to_in, subs_churn_pc_in, subs_growth_pc_in, subs_new_actual_to_in: year({ year_in }) }) -\n    subs_new({ year_in, actuals_table_in, subs_0_in, subs_churned_actual_to_in, subs_churn_pc_in, subs_growth_pc_in, subs_new_actual_to_in: year({ year_in }) - 1 }));\n\n};\n\nexport const subs_churned_experience = ({ year_in, actuals_table_in, subs_0_in, subs_growth_pc_in, subs_churn_pc_in }) => {\n  // now a fn on year\n  const subs_new_actual_to_in = year({ year_in });\n  return (\n    subs_churned({ year_in, actuals_table_in, subs_0_in, subs_new_actual_to_in, subs_growth_pc_in, subs_churn_pc_in, subs_churned_actual_to_in: year({ year_in }) }) -\n    subs_churned({ year_in, actuals_table_in, subs_0_in, subs_new_actual_to_in, subs_growth_pc_in, subs_churn_pc_in, subs_churned_actual_to_in: year({ year_in }) - 1 }));\n  // todo project, constrain rec ordering somewhere\n};\n\n// re introspection: devtools can probably do this? But messy at that stage, so might not be an option\n// export to excel with hacked formulae (=7+0*E8) for relationships is probably a nice short-term feature until I get the experience outside\n// hacked formulae can easily be replaced by proper conversions if I convert JS to Excel in fut\n// maybe this is important for explanation phase, more impt than technical/memo-loader?"],"mappings":"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"}