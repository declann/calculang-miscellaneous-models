{"version":3,"names":["subs","subs_new","subs_new_expected","subs_churned","subs_churned_expected","year","revenue","expenses","profit","CAC","actuals_table","actuals_table_in","subs_0","subs_0_in","subs_new_actual","year_in","subs_churned_actual","subs_new_actual_to","subs_new_actual_to_in","subs_churned_actual_to","subs_churned_actual_to_in","subs_churn_pc_in","subs_growth_pc_in","ea_start","ea_start_in","ea_end","ea_end_in","subs_ea","type","function","value","subs_new_experience","subs_churned_experience"],"sources":["rec.cul.js"],"sourcesContent":["import {\n  subs,\n  subs_new as subs_new_expected,\n  subs_churned as subs_churned_expected,\n  year,\n  revenue,\n  expenses,\n  profit,\n  CAC,\n} from './expected.cul.js';\nexport { subs, year };\nexport { revenue, expenses, profit, CAC }; // necessary\n\nexport const actuals_table = () => actuals_table_in;\n\n// actuals\nexport const subs_0 = () => subs_0_in; // start at 100 subs (this line now redundant!)\nexport const subs_new_actual = () =>\n  actuals_table()[year() + 1].subs_new_actual;\nexport const subs_churned_actual = () =>\n  actuals_table()[year() + 1].subs_churned_actual;\n\n// year up to which actual data should be used, -1=use only expecteds\nexport const subs_new_actual_to = () => subs_new_actual_to_in;\nexport const subs_churned_actual_to = () => subs_churned_actual_to_in;\n\n// interleave actuals into projections: this rebases expd using actuals?\nexport const subs_new = () => {\n  if (year() <= subs_new_actual_to()) return subs_new_actual();\n  else return subs_new_expected(); // this is an override which uses itself: but it doesn't compile correctly, check memo-loader version?\n};\nexport const subs_churned = () => {\n  if (year() <= subs_churned_actual_to()) return subs_churned_actual();\n  else return subs_churned_expected();\n};\n\n// move away from experience.\n// just look at projections\n// => subs({year:x,actuals:x})\n\nexport const ea_start = () => ea_start_in;\nexport const ea_end = () => ea_end_in;\n\nexport const subs_ea = () => [\n  {\n    type: 'Expected',\n    function: 'subs',\n    value: subs({\n      year_in: ea_end(),\n      subs_new_actual_to_in: ea_start(),\n      subs_churned_actual_to_in: ea_start(),\n    }),\n  },\n  {\n    type: '-> Actual Sales', // this impact will include expd churn on sales impact, alt. split could use 0 decrements and create a balancing 'confounding' amount\n    function: 'subs',\n    value: subs({\n      year_in: ea_end(),\n      subs_new_actual_to_in: ea_end(),\n      subs_churned_actual_to_in: ea_start(),\n    }),\n  },\n  {\n    type: '-> Actual Churn (=Actual)',\n    function: 'subs',\n    value: subs({\n      year_in: ea_end(),\n      subs_new_actual_to_in: ea_end(),\n      subs_churned_actual_to_in: ea_end(),\n    }),\n  },\n];\n// todo use an impacts abstraction or move subtraction to VL\n\n// reconcile actual to expected, experience=A-E\n// in year\n// this should be abstracted using a table for clarity\nexport const subs_new_experience = () => {\n  // now a fn on year\n  const subs_churned_actual_to_in = year() - 1;\n  return (\n    subs_new(/*_actual*/ { subs_new_actual_to_in: year() }) -\n    subs_new(/*_expected*/ { subs_new_actual_to_in: year() - 1 })\n  );\n};\n\nexport const subs_churned_experience = () => {\n  // now a fn on year\n  const subs_new_actual_to_in = year();\n  return (\n    subs_churned(/*_actual*/ { subs_churned_actual_to_in: year() }) -\n    subs_churned(/*_expected*/ { subs_churned_actual_to_in: year() - 1 })\n  ); // todo project, constrain rec ordering somewhere\n};\n\n// re introspection: devtools can probably do this? But messy at that stage, so might not be an option\n// export to excel with hacked formulae (=7+0*E8) for relationships is probably a nice short-term feature until I get the experience outside\n// hacked formulae can easily be replaced by proper conversions if I convert JS to Excel in fut\n// maybe this is important for explanation phase, more impt than technical/memo-loader?\n"],"mappings":"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"}