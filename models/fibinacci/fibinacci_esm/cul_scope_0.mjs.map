{"version":3,"names":["memoize","n_","n$","fib_","fib$","n$m","JSON","stringify","n","a","n_in","fib$m","fib"],"sources":["fibinacci.cul.js"],"sourcesContent":["\n    import { memoize } from 'underscore';\n    //import memoize from 'lru-memoize';\n    //import { isEqual } from 'underscore'; // TODO poor tree shaking support, or why is this impact so massive? Move to lodash/lodash-es?\n    \n    import { n_ as n$, fib_ as fib$ } from './fibinacci.cul.js?+memoed'; // there is already-culed stuff in here, why? imports to memo loader include cul_scope_id, what logic should it apply RE passing forward? eliminate? Probably!\n    \n    \n\n////////// start n memo-loader code //////////\n//const n$m = memoize(999999, isEqual)(n$);\nexport const n$m = memoize(n$, JSON.stringify);\nexport const n = (a) => {\n  return n$m(a);\n  // eslint-disable-next-line no-undef\n  n$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end n memo-loader code //////////\n\n\n\n////////// start fib memo-loader code //////////\n//const fib$m = memoize(999999, isEqual)(fib$);\nexport const fib$m = memoize(fib$, JSON.stringify);\nexport const fib = (a) => {\n  return fib$m(a);\n  // eslint-disable-next-line no-undef\n  fib$(); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end fib memo-loader code //////////\n\n\n    "],"mappings":";AACI,SAASA,OAAO,QAAQ,YAAY;AACpC;AACA;;AAEA,SAASC,EAAE,IAAIC,EAAE,EAAEC,IAAI,IAAIC,IAAI,QAAQ,iEAA4B,CAAC,CAAC;;;;AAIzE;AACA;AACA,OAAO,MAAMC,GAAG,GAAGL,OAAO,CAACE,EAAE,EAAEI,IAAI,CAACC,SAAS,CAAC;AAC9C,OAAO,MAAMC,CAAC,GAAGA,CAACC,CAAC,KAAK;EACtB,OAAOJ,GAAG,CAACI,CAAC,CAAC;EACb;EACAP,EAAE,GAAAQ,IAAA,GAAE,CAAC,CAAC;AACR,CAAC;AACD;;;;AAIA;AACA;AACA,OAAO,MAAMC,KAAK,GAAGX,OAAO,CAACI,IAAI,EAAEE,IAAI,CAACC,SAAS,CAAC;AAClD,OAAO,MAAMK,GAAG,GAAGA,CAACH,CAAC,KAAK;EACxB,OAAOE,KAAK,CAACF,CAAC,CAAC;EACf;EACAL,IAAI,GAAAM,IAAA,GAAE,CAAC,CAAC;AACV,CAAC;AACD"}