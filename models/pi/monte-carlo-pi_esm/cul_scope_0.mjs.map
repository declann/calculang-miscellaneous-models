{"version":3,"sources":["monte-carlo-pi.cul.js"],"names":["memoize","p_","p$","x_","x$","y_","y$","f_","f$","inside_","inside$","inside_count_","inside_count$","ratio_","ratio$","pi_approximation_","pi_approximation$","p$m","JSON","stringify","p","a","p_in","x$m","x","y$m","y","f$m","f","inside$m","inside","inside_count$m","inside_count","ratio$m","ratio","pi_approximation$m","pi_approximation"],"mappings":"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","sourcesContent":["\nimport { memoize } from 'underscore';\n//import memoize from 'lru-memoize';\n//import { isEqual } from 'underscore'; // TODO poor tree shaking support, or why is this impact so massive? Move to lodash/lodash-es?\n\nimport { p_ as p$, x_ as x$, y_ as y$, f_ as f$, inside_ as inside$, inside_count_ as inside_count$, ratio_ as ratio$, pi_approximation_ as pi_approximation$ } from \"./monte-carlo-pi.cul.js?+memoed&cul_scope_id=1&cul_parent_scope_id=0\"; // there is already-culed stuff in here, why? imports to memo loader include cul_scope_id, what logic should it apply RE passing forward? eliminate? Probably!\n\n\n\n////////// start p memo-loader code //////////\n//const p$m = memoize(999999, isEqual)(p$);\nexport const p$m = memoize(p$, JSON.stringify);\nexport const p = (a) => {\n  return p$m(a);\n  // eslint-disable-next-line no-undef\n  p$({ p_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end p memo-loader code //////////\n\n\n\n////////// start x memo-loader code //////////\n//const x$m = memoize(999999, isEqual)(x$);\nexport const x$m = memoize(x$, JSON.stringify);\nexport const x = (a) => {\n  return x$m(a);\n  // eslint-disable-next-line no-undef\n  x$({ p_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end x memo-loader code //////////\n\n\n\n////////// start y memo-loader code //////////\n//const y$m = memoize(999999, isEqual)(y$);\nexport const y$m = memoize(y$, JSON.stringify);\nexport const y = (a) => {\n  return y$m(a);\n  // eslint-disable-next-line no-undef\n  y$({ p_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end y memo-loader code //////////\n\n\n\n////////// start f memo-loader code //////////\n//const f$m = memoize(999999, isEqual)(f$);\nexport const f$m = memoize(f$, JSON.stringify);\nexport const f = (a) => {\n  return f$m(a);\n  // eslint-disable-next-line no-undef\n  f$({ p_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end f memo-loader code //////////\n\n\n\n////////// start inside memo-loader code //////////\n//const inside$m = memoize(999999, isEqual)(inside$);\nexport const inside$m = memoize(inside$, JSON.stringify);\nexport const inside = (a) => {\n  return inside$m(a);\n  // eslint-disable-next-line no-undef\n  inside$({ p_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end inside memo-loader code //////////\n\n\n\n////////// start inside_count memo-loader code //////////\n//const inside_count$m = memoize(999999, isEqual)(inside_count$);\nexport const inside_count$m = memoize(inside_count$, JSON.stringify);\nexport const inside_count = (a) => {\n  return inside_count$m(a);\n  // eslint-disable-next-line no-undef\n  inside_count$({ p_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end inside_count memo-loader code //////////\n\n\n\n////////// start ratio memo-loader code //////////\n//const ratio$m = memoize(999999, isEqual)(ratio$);\nexport const ratio$m = memoize(ratio$, JSON.stringify);\nexport const ratio = (a) => {\n  return ratio$m(a);\n  // eslint-disable-next-line no-undef\n  ratio$({ p_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end ratio memo-loader code //////////\n\n\n\n////////// start pi_approximation memo-loader code //////////\n//const pi_approximation$m = memoize(999999, isEqual)(pi_approximation$);\nexport const pi_approximation$m = memoize(pi_approximation$, JSON.stringify);\nexport const pi_approximation = (a) => {\n  return pi_approximation$m(a);\n  // eslint-disable-next-line no-undef\n  pi_approximation$({ p_in }); // never run, but here to \"trick\" calculang graph logic\n};\n////////// end pi_approximation memo-loader code //////////"]}