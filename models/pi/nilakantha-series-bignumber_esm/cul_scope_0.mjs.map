{"version":3,"sources":["nilakantha-series-bignumber.cul.js"],"names":["range","BigNumber","set","DECIMAL_PLACES","ROUNDING_MODE","term_number","term_number_in","terms","terms_in","sign","Math","pow","denominator","term","dividedBy","times","sum_of_terms","res","plus","pi_approximation"],"mappings":"AAAA;;AAEA,SAASA,KAAT,QAAsB,YAAtB;;AAEA,OAAOC,SAAP,MAAsB,gBAAtB;;AAEAA,SAAS,CAACC,GAAV,CAAc,EAAEC,cAAc,EAAE,GAAlB,EAAuBC,aAAa,EAAE,CAAtC,EAAd;;AAEA,OAAO,MAAMC,WAAW,GAAG,CAAC,EAAEC,cAAF,EAAD,KAAwBA,cAA5C;AACP,OAAO,MAAMC,KAAK,GAAG,CAAC,EAAEC,QAAF,EAAD,KAAkBA,QAAhC;;AAEP,OAAO,MAAMC,IAAI,GAAG,CAAC,EAAEH,cAAF,EAAD,KAAwBI,IAAI,CAACC,GAAL,CAAS,CAAC,CAAV,EAAaN,WAAW,CAAC,EAAEC,cAAF,EAAD,CAAX,GAAkC,CAA/C,CAArC,C,CAAwF;;AAE/F,OAAO,MAAMM,WAAW,GAAG,CAAC,EAAEN,cAAF,EAAD,KAAwBD,WAAW,CAAC,EAAEC,cAAF,EAAD,CAAX,GAAkC,CAAlC,IAAuCD,WAAW,CAAC,EAAEC,cAAF,EAAD,CAAX,GAAkC,CAAlC,GAAsC,CAA7E,KAAmFD,WAAW,CAAC,EAAEC,cAAF,EAAD,CAAX,GAAkC,CAAlC,GAAsC,CAAzH,CAA5C;;AAEP,OAAO,MAAMO,IAAI,GAAG,CAAC,EAAEP,cAAF,EAAD,KAAwB,YAAY,IAAIL,SAAJ,CAAc,GAAd,EAAmBa,SAAnB,CAA6BF,WAAW,CAAC,EAAEN,cAAF,EAAD,CAAxC,EAA8DS,KAA9D,CAAoEN,IAAI,CAAC,EAAEH,cAAF,EAAD,CAAxE,CAAjD,C,CAAgJ;;AAEvJ;AACA;AACA;;AAEA,OAAO,MAAMU,YAAY,GAAG,CAAC,EAAER,QAAF,EAAD,KAAkB;AAC5C,MAAIS,GAAG,GAAG,IAAIhB,SAAJ,CAAc,CAAd,CAAV,CAA2BK,cAAc,GAAG,CAA5C;;AAEA,SAAOA,cAAc,GAAGC,KAAK,CAAC,EAAEC,QAAF,EAAD,CAA7B,EAA6C;AAC3CS,IAAAA,GAAG,GAAGA,GAAG,CAACC,IAAJ,CAASL,IAAI,CAAC,EAAEP,cAAF,EAAD,CAAb,CAAN;;AAEAA,IAAAA,cAAc,EAFd;AAGD;;AAED,SAAOW,GAAP;AACD,CAVM;;AAYP,OAAO,MAAME,gBAAgB,GAAG,CAAC,EAAEX,QAAF,EAAD,KAAkBQ,YAAY,CAAC,EAAER,QAAF,EAAD,CAAZ,CAA2BO,KAA3B,CAAiC,CAAjC,EAAoCG,IAApC,CAAyC,CAAzC,CAA3C,C,CAAwF","sourcesContent":["// http://www.maeckes.nl/Formule%20voor%20pi%20(Nilakantha)%20GB.html\n\nimport { range } from 'underscore';\n\nimport BigNumber from \"./bignumber.js\";\n\nBigNumber.set({ DECIMAL_PLACES: 100, ROUNDING_MODE: 4 });\n\nexport const term_number = ({ term_number_in }) => term_number_in;\nexport const terms = ({ terms_in }) => terms_in;\n\nexport const sign = ({ term_number_in }) => Math.pow(-1, term_number({ term_number_in }) - 1); // +, -, +, -, ...\n\nexport const denominator = ({ term_number_in }) => term_number({ term_number_in }) * 2 * (term_number({ term_number_in }) * 2 + 1) * (term_number({ term_number_in }) * 2 + 2);\n\nexport const term = ({ term_number_in }) => /*sign() **/new BigNumber(\"1\").dividedBy(denominator({ term_number_in })).times(sign({ term_number_in })); //(1 / denominator());\n\n/*export const sum_of_terms = () => range(1, terms() + 1).reduce(\n    (acc, term_number_in) => acc + term({ term_number_in }),\n    0);*/\n\nexport const sum_of_terms = ({ terms_in }) => {\n  let res = new BigNumber(0),term_number_in = 1;\n\n  while (term_number_in < terms({ terms_in })) {\n    res = res.plus(term({ term_number_in })),\n\n    term_number_in++;\n  }\n\n  return res;\n};\n\nexport const pi_approximation = ({ terms_in }) => sum_of_terms({ terms_in }).times(4).plus(3); // + 3"]}