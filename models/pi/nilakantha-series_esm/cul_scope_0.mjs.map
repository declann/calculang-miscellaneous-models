{"version":3,"sources":["nilakantha-series.cul.js"],"names":["range","term_number","term_number_in","terms","terms_in","sign","Math","pow","denominator","term","sum_of_terms","res","pi_approximation"],"mappings":"AAAA;;AAEA,SAASA,KAAT,QAAsB,YAAtB;;AAEA,OAAO,MAAMC,WAAW,GAAG,CAAC,EAAEC,cAAF,EAAD,KAAwBA,cAA5C;AACP,OAAO,MAAMC,KAAK,GAAG,CAAC,EAAEC,QAAF,EAAD,KAAkBA,QAAhC;;AAEP,OAAO,MAAMC,IAAI,GAAG,CAAC,EAAEH,cAAF,EAAD,KAAwBI,IAAI,CAACC,GAAL,CAAS,CAAC,CAAV,EAAaN,WAAW,CAAC,EAAEC,cAAF,EAAD,CAAX,GAAkC,CAA/C,CAArC,C,CAAwF;;AAE/F,OAAO,MAAMM,WAAW,GAAG,CAAC,EAAEN,cAAF,EAAD,KAAwBD,WAAW,CAAC,EAAEC,cAAF,EAAD,CAAX,GAAkC,CAAlC,IAAuCD,WAAW,CAAC,EAAEC,cAAF,EAAD,CAAX,GAAkC,CAAlC,GAAsC,CAA7E,KAAmFD,WAAW,CAAC,EAAEC,cAAF,EAAD,CAAX,GAAkC,CAAlC,GAAsC,CAAzH,CAA5C;;AAEP,OAAO,MAAMO,IAAI,GAAG,CAAC,EAAEP,cAAF,EAAD,KAAwBG,IAAI,CAAC,EAAEH,cAAF,EAAD,CAAJ,IAA4B,IAAIM,WAAW,CAAC,EAAEN,cAAF,EAAD,CAA3C,CAArC;;AAEP;AACA;AACA;;AAEA,OAAO,MAAMQ,YAAY,GAAG,CAAC,EAAEN,QAAF,EAAD,KAAkB;AAC5C,MAAIO,GAAG,GAAG,CAAV,CAAYT,cAAc,GAAG,CAA7B;;AAEA,SAAOA,cAAc,GAAGC,KAAK,CAAC,EAAEC,QAAF,EAAD,CAA7B,EAA6C;AAC3CO,IAAAA,GAAG,IAAIF,IAAI,CAAC,EAAEP,cAAF,EAAD,CAAX;AACAA,IAAAA,cAAc;AACf;;AAED,SAAOS,GAAP;AACD,CATM;;AAWP,OAAO,MAAMC,gBAAgB,GAAG,CAAC,EAAER,QAAF,EAAD,KAAkBM,YAAY,CAAC,EAAEN,QAAF,EAAD,CAAZ,GAA6B,CAA7B,GAAiC,CAA5E","sourcesContent":["// http://www.maeckes.nl/Formule%20voor%20pi%20(Nilakantha)%20GB.html\n\nimport { range } from 'underscore';\n\nexport const term_number = ({ term_number_in }) => term_number_in;\nexport const terms = ({ terms_in }) => terms_in;\n\nexport const sign = ({ term_number_in }) => Math.pow(-1, term_number({ term_number_in }) - 1); // +, -, +, -, ...\n\nexport const denominator = ({ term_number_in }) => term_number({ term_number_in }) * 2 * (term_number({ term_number_in }) * 2 + 1) * (term_number({ term_number_in }) * 2 + 2);\n\nexport const term = ({ term_number_in }) => sign({ term_number_in }) * (1 / denominator({ term_number_in }));\n\n/*export const sum_of_terms = () => range(1, terms() + 1).reduce(\n    (acc, term_number_in) => acc + term({ term_number_in }),\n    0);*/\n\nexport const sum_of_terms = ({ terms_in }) => {\n  let res = 0,term_number_in = 1;\n\n  while (term_number_in < terms({ terms_in })) {\n    res += term({ term_number_in });\n    term_number_in++;\n  }\n\n  return res;\n};\n\nexport const pi_approximation = ({ terms_in }) => sum_of_terms({ terms_in }) * 4 + 3;"]}