{"version":3,"sources":["margins.cul.js"],"names":["bar_height","gap","bottom_margin","top_margin","container_height","num_bars","top_margin$","top_margin$_in","bottom_margin$","bottom_margin$_in","num_bars_","num_bars_in","gap$","gap$_in","bar_height$","bar_height$_in","container_height$","container_height$_in","container_height_","undefined","top_margin_","bottom_margin_","gap_","bar_height_"],"mappings":"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","sourcesContent":["import { bar_height } from \"./margins.cul.js\";import { gap } from \"./margins.cul.js\";import { bottom_margin } from \"./margins.cul.js\";import { top_margin } from \"./margins.cul.js\";import { container_height } from \"./margins.cul.js\";import { num_bars } from \"./margins.cul.js\"; // using constraint equation used by Bret Victor in:\n// http://worrydream.com/ScrubbingCalculator/\n\nexport const top_margin$ = ({ top_margin$_in }) => top_margin$_in;\nexport const bottom_margin$ = ({ bottom_margin$_in }) => bottom_margin$_in;\nexport const num_bars_ = ({ num_bars_in }) => num_bars_in; // not unlockable (fut: possibly, with a remainder?)\nexport const gap$ = ({ gap$_in }) => gap$_in;\nexport const bar_height$ = ({ bar_height$_in }) => bar_height$_in;\nexport const container_height$ = ({ container_height$_in }) => container_height$_in;\n\n// the formula we are interested in (following example Bret Victor uses):\n//    top_margin + bottom_margin + (num_bars-1) * gap + num_bars * bar_height = container_height\n\nexport const container_height_ = ({ container_height$_in, top_margin$_in, bottom_margin$_in, num_bars_in, gap$_in, bar_height$_in }) =>\ncontainer_height$({ container_height$_in }) != undefined ?\ncontainer_height$({ container_height$_in }) // nullish coalescing not working TODO fix\n: top_margin({ top_margin$_in, container_height$_in, bottom_margin$_in, num_bars_in, gap$_in, bar_height$_in }) +\nbottom_margin({ bottom_margin$_in, container_height$_in, top_margin$_in, num_bars_in, gap$_in, bar_height$_in }) +\n(num_bars({ num_bars_in }) - 1) * gap({ gap$_in, container_height$_in, top_margin$_in, bottom_margin$_in, num_bars_in, bar_height$_in }) +\nnum_bars({ num_bars_in }) * bar_height({ bar_height$_in, container_height$_in, top_margin$_in, bottom_margin$_in, num_bars_in, gap$_in });\n\n// I do manual algebraic manipulation below, some tools can do this auto, investigate?\n\nexport const top_margin_ = ({ top_margin$_in, container_height$_in, bottom_margin$_in, num_bars_in, gap$_in, bar_height$_in }) =>\ntop_margin$({ top_margin$_in }) != undefined ?\ntop_margin$({ top_margin$_in }) :\ncontainer_height({ container_height$_in, top_margin$_in, bottom_margin$_in, num_bars_in, gap$_in, bar_height$_in }) - (\nbottom_margin({ bottom_margin$_in, container_height$_in, top_margin$_in, num_bars_in, gap$_in, bar_height$_in }) + (num_bars({ num_bars_in }) - 1) * gap({ gap$_in, container_height$_in, top_margin$_in, bottom_margin$_in, num_bars_in, bar_height$_in }) + num_bars({ num_bars_in }) * bar_height({ bar_height$_in, container_height$_in, top_margin$_in, bottom_margin$_in, num_bars_in, gap$_in }));\n\nexport const bottom_margin_ = ({ bottom_margin$_in, container_height$_in, top_margin$_in, num_bars_in, gap$_in, bar_height$_in }) =>\nbottom_margin$({ bottom_margin$_in }) != undefined ?\nbottom_margin$({ bottom_margin$_in }) :\ncontainer_height({ container_height$_in, top_margin$_in, bottom_margin$_in, num_bars_in, gap$_in, bar_height$_in }) - (\ntop_margin({ top_margin$_in, container_height$_in, bottom_margin$_in, num_bars_in, gap$_in, bar_height$_in }) + (num_bars({ num_bars_in }) - 1) * gap({ gap$_in, container_height$_in, top_margin$_in, bottom_margin$_in, num_bars_in, bar_height$_in }) + num_bars({ num_bars_in }) * bar_height({ bar_height$_in, container_height$_in, top_margin$_in, bottom_margin$_in, num_bars_in, gap$_in }));\n\nexport const gap_ = ({ gap$_in, container_height$_in, top_margin$_in, bottom_margin$_in, num_bars_in, bar_height$_in }) =>\ngap$({ gap$_in }) != undefined ?\ngap$({ gap$_in }) :\n(container_height({ container_height$_in, top_margin$_in, bottom_margin$_in, num_bars_in, gap$_in, bar_height$_in }) -\ntop_margin({ top_margin$_in, container_height$_in, bottom_margin$_in, num_bars_in, gap$_in, bar_height$_in }) -\nbottom_margin({ bottom_margin$_in, container_height$_in, top_margin$_in, num_bars_in, gap$_in, bar_height$_in }) -\nnum_bars({ num_bars_in }) * bar_height({ bar_height$_in, container_height$_in, top_margin$_in, bottom_margin$_in, num_bars_in, gap$_in })) / (\nnum_bars({ num_bars_in }) - 1);\n\nexport const bar_height_ = ({ bar_height$_in, container_height$_in, top_margin$_in, bottom_margin$_in, num_bars_in, gap$_in }) =>\nbar_height$({ bar_height$_in }) != undefined ?\nbar_height$({ bar_height$_in }) :\n(container_height({ container_height$_in, top_margin$_in, bottom_margin$_in, num_bars_in, gap$_in, bar_height$_in }) -\ntop_margin({ top_margin$_in, container_height$_in, bottom_margin$_in, num_bars_in, gap$_in, bar_height$_in }) -\nbottom_margin({ bottom_margin$_in, container_height$_in, top_margin$_in, num_bars_in, gap$_in, bar_height$_in }) -\ngap({ gap$_in, container_height$_in, top_margin$_in, bottom_margin$_in, num_bars_in, bar_height$_in }) * (num_bars({ num_bars_in }) - 1)) /\nnum_bars({ num_bars_in });"]}